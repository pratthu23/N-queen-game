#include <iostream>
#include <vector>
#include <random>
#include <chrono>
using namespace std;

class NQueenGame {
private:
    vector<vector<char>> board;
    int n;
    int currentPlayer;
    bool vsComputer;
    int player1Queens;
    int player2Queens;

public:
    NQueenGame() {
        n = 4;
        board = vector<vector<char>>(n, vector<char>(n, '.'));
        currentPlayer = 1;
        player1Queens = 0;
        player2Queens = 0;
        vsComputer = false;
    }

    void displayBoard() {
        cout << "\n  0 1 2 3\n";
        for(int i = 0; i < n; i++) {
            cout << i << " ";
            for(int j = 0; j < n; j++) {
                cout << board[i][j] << " ";
            }
            cout << endl;
        }
        cout << "\nPlayer 1 Queens: " << player1Queens << "\n";
        cout << "Player 2 Queens: " << player2Queens << "\n\n";
    }

    bool isValidMove(int row, int col) {
        if(row < 0 || row >= n || col < 0 || col >= n) return false;
        if(board[row][col] != '.') return false;
        
        for(int j = 0; j < n; j++) {
            if(board[row][j] == 'Q') return false;
        }
        for(int i = 0; i < n; i++) {
            if(board[i][col] == 'Q') return false;
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(board[i][j] == 'Q') {
                    if(abs(row - i) == abs(col - j)) return false;
                }
            }
        }

        return true;
    }

    pair<int,int> computerMove() {
        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> dis(0, n-1);
        
        for(int attempts = 0; attempts < 100; attempts++) {
            int row = dis(gen);
            int col = dis(gen);
            if(isValidMove(row, col)) {
                return {row, col};
            }
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(isValidMove(i, j)) {
                    return {i, j};
                }
            }
        }
        return {-1, -1}; 
    }

    bool makeMove(int row, int col) {
        if(!isValidMove(row, col)) {
            cout << "Invalid move! Please try again.\n";
            return false;
        }

        board[row][col] = 'Q';
        if(currentPlayer == 1) player1Queens++;
        else player2Queens++;
        return true;
    }

    bool isGameOver() {
        return (player1Queens + player2Queens == n);
    }

    void playVsComputer() {
        vsComputer = true;
        cout << "\nN-Queens Game (4x4) - vs Computer\n";
        cout << "Place queens such that no two queens can attack each other\n";
        cout << "First player to successfully place 2 queens wins!\n\n";

        while(!isGameOver()) {
            displayBoard();
            
            if(currentPlayer == 1) {
                cout << "Your turn (Player 1)\n";
                int row, col;
                cout << "Enter row and column (0-3): ";
                while(!(cin >> row >> col)) {
                    cin.clear();
                    cin.ignore(10000, '\n');
                    cout << "Invalid input! Enter row and column (0-3): ";
                }
                
                if(makeMove(row, col)) {
                    if(isGameOver()) {
                        displayBoard();
                        cout << "You win!\n";
                        break;
                    }
                    currentPlayer = 2;
                }
            } else {
                cout << "Computer's turn...\n";
                auto [row, col] = computerMove();
                if(row != -1 && makeMove(row, col)) {
                    cout << "Computer placed queen at position: " << row << "," << col << endl;
                    if(isGameOver()) {
                        displayBoard();
                        cout << "Computer wins!\n";
                        break;
                    }
                    currentPlayer = 1;
                }
            }
        }
    }

    void playMultiplayer() {
        vsComputer = false;
        cout << "\nN-Queens Game (4x4) - Multiplayer\n";
        cout << "Place queens such that no two queens can attack each other\n";
        cout << "First player to successfully place 2 queens wins!\n\n";

        while(!isGameOver()) {
            displayBoard();
            cout << "Player " << currentPlayer << "'s turn\n";
            
            int row, col;
            cout << "Enter row and column (0-3): ";
            while(!(cin >> row >> col)) {
                cin.clear();
                cin.ignore(10000, '\n');
                cout << "Invalid input! Enter row and column (0-3): ";
            }

            if(makeMove(row, col)) {
                if(isGameOver()) {
                    displayBoard();
                    cout << "Player " << currentPlayer << " wins!\n";
                    break;
                }
                currentPlayer = (currentPlayer == 1) ? 2 : 1;
            }
        }
    }
};

int main() {
    while(true) {
        cout << "\nN-Queens Game Menu\n";
        cout << "1. Play vs Computer\n";
        cout << "2. Play Multiplayer\n";
        cout << "3. Exit\n";
        cout << "Enter your choice (1-3): ";
        
        int choice;
        while(!(cin >> choice) || choice < 1 || choice > 3) {
            cin.clear();
            cin.ignore(10000, '\n');
            cout << "Invalid input! Enter your choice (1-3): ";
        }

        if(choice == 3) break;

        NQueenGame game;
        if(choice == 1) {
            cin.ignore(10000, '\n');  characters
            game.playVsComputer();
        } else {
            game.playMultiplayer();
        }

        cout << "\nGame Over! Press Enter to continue...";
        cin.ignore(10000, '\n');
        cin.get();
    }

    return 0;
}
